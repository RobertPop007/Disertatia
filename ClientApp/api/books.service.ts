/**
 * Proiect diserta»õie
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Book } from '../model/book';
import { ObjectId } from '../model/objectId';
import { ReviewDto } from '../model/reviewDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BooksService {

    protected basePath = 'https://localhost:5001';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param bookId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBooksAddBookToUserBookIdPost(bookId: ObjectId, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiBooksAddBookToUserBookIdPost(bookId: ObjectId, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiBooksAddBookToUserBookIdPost(bookId: ObjectId, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiBooksAddBookToUserBookIdPost(bookId: ObjectId, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (bookId === null || bookId === undefined) {
            throw new Error('Required parameter bookId was null or undefined when calling apiBooksAddBookToUserBookIdPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/api/Books/AddBookToUser/${encodeURIComponent(String(bookId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param bookId 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBooksAddReviewForBookIdPost(bookId: ObjectId, body?: ReviewDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiBooksAddReviewForBookIdPost(bookId: ObjectId, body?: ReviewDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiBooksAddReviewForBookIdPost(bookId: ObjectId, body?: ReviewDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiBooksAddReviewForBookIdPost(bookId: ObjectId, body?: ReviewDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (bookId === null || bookId === undefined) {
            throw new Error('Required parameter bookId was null or undefined when calling apiBooksAddReviewForBookIdPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/Books/AddReviewFor/${encodeURIComponent(String(bookId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param bookId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBooksBookAlreadyAddedGet(bookId?: ObjectId, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public apiBooksBookAlreadyAddedGet(bookId?: ObjectId, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public apiBooksBookAlreadyAddedGet(bookId?: ObjectId, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public apiBooksBookAlreadyAddedGet(bookId?: ObjectId, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (bookId !== undefined && bookId !== null) {
            queryParameters = queryParameters.set('bookId', <any>bookId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/api/Books/BookAlreadyAdded`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param bookId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBooksDeleteBookFromUserBookIdDelete(bookId: ObjectId, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiBooksDeleteBookFromUserBookIdDelete(bookId: ObjectId, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiBooksDeleteBookFromUserBookIdDelete(bookId: ObjectId, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiBooksDeleteBookFromUserBookIdDelete(bookId: ObjectId, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (bookId === null || bookId === undefined) {
            throw new Error('Required parameter bookId was null or undefined when calling apiBooksDeleteBookFromUserBookIdDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/Books/DeleteBookFromUser/${encodeURIComponent(String(bookId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param bookId 
     * @param reviewId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBooksDeleteReviewForBookIdDelete(bookId: ObjectId, reviewId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiBooksDeleteReviewForBookIdDelete(bookId: ObjectId, reviewId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiBooksDeleteReviewForBookIdDelete(bookId: ObjectId, reviewId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiBooksDeleteReviewForBookIdDelete(bookId: ObjectId, reviewId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (bookId === null || bookId === undefined) {
            throw new Error('Required parameter bookId was null or undefined when calling apiBooksDeleteReviewForBookIdDelete.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reviewId !== undefined && reviewId !== null) {
            queryParameters = queryParameters.set('reviewId', <any>reviewId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/Books/DeleteReviewFor/${encodeURIComponent(String(bookId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param reviewId 
     * @param bookId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBooksDislikeReviewForReviewIdPost(reviewId: string, bookId?: ObjectId, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiBooksDislikeReviewForReviewIdPost(reviewId: string, bookId?: ObjectId, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiBooksDislikeReviewForReviewIdPost(reviewId: string, bookId?: ObjectId, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiBooksDislikeReviewForReviewIdPost(reviewId: string, bookId?: ObjectId, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (reviewId === null || reviewId === undefined) {
            throw new Error('Required parameter reviewId was null or undefined when calling apiBooksDislikeReviewForReviewIdPost.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (bookId !== undefined && bookId !== null) {
            queryParameters = queryParameters.set('bookId', <any>bookId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/api/Books/DislikeReviewFor/${encodeURIComponent(String(reviewId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param searchedBook 
     * @param orderBy 
     * @param pageNumber 
     * @param pageSize 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBooksGetAllBooksGet(searchedBook?: string, orderBy?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiBooksGetAllBooksGet(searchedBook?: string, orderBy?: string, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiBooksGetAllBooksGet(searchedBook?: string, orderBy?: string, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiBooksGetAllBooksGet(searchedBook?: string, orderBy?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (searchedBook !== undefined && searchedBook !== null) {
            queryParameters = queryParameters.set('SearchedBook', <any>searchedBook);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('OrderBy', <any>orderBy);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters = queryParameters.set('PageNumber', <any>pageNumber);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('PageSize', <any>pageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/Books/GetAllBooks`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param username 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBooksGetBooksForUsernameGet(username: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiBooksGetBooksForUsernameGet(username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiBooksGetBooksForUsernameGet(username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiBooksGetBooksForUsernameGet(username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling apiBooksGetBooksForUsernameGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/Books/GetBooksFor/${encodeURIComponent(String(username))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param bookId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBooksGetReviewsForBookIdGet(bookId: ObjectId, observe?: 'body', reportProgress?: boolean): Observable<Array<ReviewDto>>;
    public apiBooksGetReviewsForBookIdGet(bookId: ObjectId, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ReviewDto>>>;
    public apiBooksGetReviewsForBookIdGet(bookId: ObjectId, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ReviewDto>>>;
    public apiBooksGetReviewsForBookIdGet(bookId: ObjectId, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (bookId === null || bookId === undefined) {
            throw new Error('Required parameter bookId was null or undefined when calling apiBooksGetReviewsForBookIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ReviewDto>>('get',`${this.basePath}/api/Books/GetReviewsFor/${encodeURIComponent(String(bookId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param reviewId 
     * @param bookId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiBooksLikeReviewForReviewIdPost(reviewId: string, bookId?: ObjectId, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiBooksLikeReviewForReviewIdPost(reviewId: string, bookId?: ObjectId, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiBooksLikeReviewForReviewIdPost(reviewId: string, bookId?: ObjectId, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiBooksLikeReviewForReviewIdPost(reviewId: string, bookId?: ObjectId, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (reviewId === null || reviewId === undefined) {
            throw new Error('Required parameter reviewId was null or undefined when calling apiBooksLikeReviewForReviewIdPost.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (bookId !== undefined && bookId !== null) {
            queryParameters = queryParameters.set('bookId', <any>bookId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/api/Books/LikeReviewFor/${encodeURIComponent(String(reviewId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param name 
     * @param title 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBook(name: string, title?: string, observe?: 'body', reportProgress?: boolean): Observable<Book>;
    public getBook(name: string, title?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Book>>;
    public getBook(name: string, title?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Book>>;
    public getBook(name: string, title?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getBook.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (title !== undefined && title !== null) {
            queryParameters = queryParameters.set('title', <any>title);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Book>('get',`${this.basePath}/api/Books/${encodeURIComponent(String(name))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
