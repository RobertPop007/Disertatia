/**
 * Proiect diserta»õie
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Game } from '../model/game';
import { ObjectId } from '../model/objectId';
import { ReviewDto } from '../model/reviewDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class GameService {

    protected basePath = 'https://localhost:5001';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param game_id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiGameAddGameToUserGameIdPost(game_id: ObjectId, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiGameAddGameToUserGameIdPost(game_id: ObjectId, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiGameAddGameToUserGameIdPost(game_id: ObjectId, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiGameAddGameToUserGameIdPost(game_id: ObjectId, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (game_id === null || game_id === undefined) {
            throw new Error('Required parameter game_id was null or undefined when calling apiGameAddGameToUserGameIdPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/api/Game/AddGameToUser/${encodeURIComponent(String(game_id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param game_id 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiGameAddReviewForGameIdPost(game_id: ObjectId, body?: ReviewDto, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiGameAddReviewForGameIdPost(game_id: ObjectId, body?: ReviewDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiGameAddReviewForGameIdPost(game_id: ObjectId, body?: ReviewDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiGameAddReviewForGameIdPost(game_id: ObjectId, body?: ReviewDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (game_id === null || game_id === undefined) {
            throw new Error('Required parameter game_id was null or undefined when calling apiGameAddReviewForGameIdPost.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/Game/AddReviewFor/${encodeURIComponent(String(game_id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param game_id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiGameDeleteGameFromUserGameIdDelete(game_id: ObjectId, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiGameDeleteGameFromUserGameIdDelete(game_id: ObjectId, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiGameDeleteGameFromUserGameIdDelete(game_id: ObjectId, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiGameDeleteGameFromUserGameIdDelete(game_id: ObjectId, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (game_id === null || game_id === undefined) {
            throw new Error('Required parameter game_id was null or undefined when calling apiGameDeleteGameFromUserGameIdDelete.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/Game/DeleteGameFromUser/${encodeURIComponent(String(game_id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param game_id 
     * @param review_id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiGameDeleteReviewForGameIdDelete(game_id: ObjectId, review_id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiGameDeleteReviewForGameIdDelete(game_id: ObjectId, review_id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiGameDeleteReviewForGameIdDelete(game_id: ObjectId, review_id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiGameDeleteReviewForGameIdDelete(game_id: ObjectId, review_id?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (game_id === null || game_id === undefined) {
            throw new Error('Required parameter game_id was null or undefined when calling apiGameDeleteReviewForGameIdDelete.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (review_id !== undefined && review_id !== null) {
            queryParameters = queryParameters.set('reviewId', <any>review_id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/Game/DeleteReviewFor/${encodeURIComponent(String(game_id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param game_id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiGameGameAlreadyAddedGet(game_id?: ObjectId, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public apiGameGameAlreadyAddedGet(game_id?: ObjectId, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public apiGameGameAlreadyAddedGet(game_id?: ObjectId, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public apiGameGameAlreadyAddedGet(game_id?: ObjectId, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (game_id !== undefined && game_id !== null) {
            queryParameters = queryParameters.set('gameId', <any>game_id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/api/Game/GameAlreadyAdded`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param searched_game 
     * @param order_by 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiGameGetAllGamesGet(searched_game?: string, order_by?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiGameGetAllGamesGet(searched_game?: string, order_by?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiGameGetAllGamesGet(searched_game?: string, order_by?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiGameGetAllGamesGet(searched_game?: string, order_by?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (searched_game !== undefined && searched_game !== null) {
            queryParameters = queryParameters.set('SearchedGame', <any>searched_game);
        }
        if (order_by !== undefined && order_by !== null) {
            queryParameters = queryParameters.set('OrderBy', <any>order_by);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/Game/GetAllGames`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param username 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiGameGetGamesForUsernameGet(username: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public apiGameGetGamesForUsernameGet(username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public apiGameGetGamesForUsernameGet(username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public apiGameGetGamesForUsernameGet(username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling apiGameGetGamesForUsernameGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/Game/GetGamesFor/${encodeURIComponent(String(username))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param game_id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiGameGetReviewsForGameIdGet(game_id: ObjectId, observe?: 'body', reportProgress?: boolean): Observable<Array<ReviewDto>>;
    public apiGameGetReviewsForGameIdGet(game_id: ObjectId, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ReviewDto>>>;
    public apiGameGetReviewsForGameIdGet(game_id: ObjectId, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ReviewDto>>>;
    public apiGameGetReviewsForGameIdGet(game_id: ObjectId, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (game_id === null || game_id === undefined) {
            throw new Error('Required parameter game_id was null or undefined when calling apiGameGetReviewsForGameIdGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ReviewDto>>('get',`${this.basePath}/api/Game/GetReviewsFor/${encodeURIComponent(String(game_id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param name 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGame(name: string, observe?: 'body', reportProgress?: boolean): Observable<Game>;
    public getGame(name: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Game>>;
    public getGame(name: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Game>>;
    public getGame(name: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getGame.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Game>('get',`${this.basePath}/api/Game/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
