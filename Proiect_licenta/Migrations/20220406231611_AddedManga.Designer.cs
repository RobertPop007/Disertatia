// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Proiect_licenta.DatabaseContext;

namespace Proiect_licenta.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220406231611_AddedManga")]
    partial class AddedManga
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Aired", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PropId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("String")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PropId");

                    b.ToTable("Aired");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Broadcast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Day")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("String")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timezone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Broadcast");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Datum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AiredId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Airing")
                        .HasColumnType("bit");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BroadcastId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Episodes")
                        .HasColumnType("int");

                    b.Property<int?>("Favorites")
                        .HasColumnType("int");

                    b.Property<Guid?>("ImagesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mal_id")
                        .HasColumnType("int");

                    b.Property<int?>("Members")
                        .HasColumnType("int");

                    b.Property<int?>("Popularity")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Rating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<int>("Scored_by")
                        .HasColumnType("int");

                    b.Property<string>("Season")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Synopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title_english")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title_japanese")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TrailerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AiredId");

                    b.HasIndex("BroadcastId");

                    b.HasIndex("ImagesId");

                    b.HasIndex("TrailerId");

                    b.ToTable("Anime");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Demographic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DatumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mal_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatumId");

                    b.ToTable("Demographic");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.From", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("From");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DatumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mal_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatumId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Images", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("JpgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Large_image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Maximum_image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medium_image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Small_image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WebpId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JpgId");

                    b.HasIndex("WebpId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Jpg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Large_image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Small_image_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Jpg");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Licensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DatumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mal_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatumId");

                    b.ToTable("Licensor");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Producer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DatumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mal_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatumId");

                    b.ToTable("Producer");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Prop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ToId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("Prop");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Studio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DatumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mal_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatumId");

                    b.ToTable("Studio");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Theme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DatumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mal_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatumId");

                    b.ToTable("Theme");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.To", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("To");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Trailer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Embed_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImagesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Youtube_id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImagesId");

                    b.ToTable("Trailer");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Webp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Large_image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Small_image_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Webp");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KnownAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LookingFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.AppUserMovieItem", b =>
                {
                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("MovieItemId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AppUserId", "MovieItemId");

                    b.HasIndex("MovieItemId");

                    b.ToTable("AppUserMovieItems");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.AppUserTvShowItem", b =>
                {
                    b.Property<int>("AppUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserId1")
                        .HasColumnType("int");

                    b.Property<string>("TvShowItemId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AppUserId");

                    b.HasIndex("AppUserId1");

                    b.HasIndex("TvShowItemId");

                    b.ToTable("AppUserTvShowItem");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConnectionId");

                    b.HasIndex("GroupName");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.AuthorManga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DatumMangaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mal_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatumMangaId");

                    b.ToTable("AuthorManga");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.DatumManga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Chapters")
                        .HasColumnType("int");

                    b.Property<int>("Favorites")
                        .HasColumnType("int");

                    b.Property<Guid?>("ImagesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mal_id")
                        .HasColumnType("int");

                    b.Property<int>("Members")
                        .HasColumnType("int");

                    b.Property<int?>("Popularity")
                        .HasColumnType("int");

                    b.Property<Guid?>("PublishedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Publishing")
                        .HasColumnType("bit");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<double>("Scored")
                        .HasColumnType("float");

                    b.Property<int>("Scored_by")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Synopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title_english")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title_japanese")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Volumes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImagesId");

                    b.HasIndex("PublishedId");

                    b.ToTable("Mangs");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.DemographicManga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DatumMangaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mal_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatumMangaId");

                    b.ToTable("DemographicManga");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.FromManga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FromManga");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.GenreManga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DatumMangaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mal_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatumMangaId");

                    b.ToTable("GenreManga");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.ImagesManga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JpgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WebpId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JpgId");

                    b.HasIndex("WebpId");

                    b.ToTable("ImagesManga");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.JpgManga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Large_image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Small_image_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JpgManga");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.PropManga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FromId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ToId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("PropManga");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.PublishedManga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PropId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("String")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PropId");

                    b.ToTable("PublishedManga");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.SerializationManga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DatumMangaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mal_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatumMangaId");

                    b.ToTable("SerializationManga");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.ThemeManga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DatumMangaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mal_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatumMangaId");

                    b.ToTable("ThemeManga");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.ToManga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<int?>("Month")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ToManga");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.WebpManga", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Large_image_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Small_image_url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebpManga");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateRead")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MessageSent")
                        .HasColumnType("datetime2");

                    b.Property<bool>("RecipientDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<string>("RecipientUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderUsername")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Movies.MovieItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Crew")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImDbRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImDbRatingCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Top250Movies");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.TvShows.TvShowItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Crew")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImDbRating")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImDbRatingCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TvShows");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.UserFriend", b =>
                {
                    b.Property<int>("AddedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("AddedUserId")
                        .HasColumnType("int");

                    b.HasKey("AddedByUserId", "AddedUserId");

                    b.HasIndex("AddedUserId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Aired", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Anime.Prop", "Prop")
                        .WithMany()
                        .HasForeignKey("PropId");

                    b.Navigation("Prop");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Datum", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Anime.Aired", "Aired")
                        .WithMany()
                        .HasForeignKey("AiredId");

                    b.HasOne("Proiect_licenta.Entities.Anime.Broadcast", "Broadcast")
                        .WithMany()
                        .HasForeignKey("BroadcastId");

                    b.HasOne("Proiect_licenta.Entities.Anime.Images", "Images")
                        .WithMany()
                        .HasForeignKey("ImagesId");

                    b.HasOne("Proiect_licenta.Entities.Anime.Trailer", "Trailer")
                        .WithMany()
                        .HasForeignKey("TrailerId");

                    b.Navigation("Aired");

                    b.Navigation("Broadcast");

                    b.Navigation("Images");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Demographic", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Anime.Datum", null)
                        .WithMany("Demographics")
                        .HasForeignKey("DatumId");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Genre", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Anime.Datum", null)
                        .WithMany("Genres")
                        .HasForeignKey("DatumId");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Images", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Anime.Jpg", "Jpg")
                        .WithMany()
                        .HasForeignKey("JpgId");

                    b.HasOne("Proiect_licenta.Entities.Anime.Webp", "Webp")
                        .WithMany()
                        .HasForeignKey("WebpId");

                    b.Navigation("Jpg");

                    b.Navigation("Webp");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Licensor", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Anime.Datum", null)
                        .WithMany("Licensors")
                        .HasForeignKey("DatumId");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Producer", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Anime.Datum", null)
                        .WithMany("Producers")
                        .HasForeignKey("DatumId");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Prop", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Anime.From", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("Proiect_licenta.Entities.Anime.To", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Studio", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Anime.Datum", null)
                        .WithMany("Studios")
                        .HasForeignKey("DatumId");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Theme", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Anime.Datum", null)
                        .WithMany("Themes")
                        .HasForeignKey("DatumId");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Trailer", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Anime.Images", "Images")
                        .WithMany()
                        .HasForeignKey("ImagesId");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.AppUserMovieItem", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.AppUser", "AppUser")
                        .WithMany("AppUserMovieItems")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proiect_licenta.Entities.Movies.MovieItem", "MovieItem")
                        .WithMany("AppUserMovieItems")
                        .HasForeignKey("MovieItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("MovieItem");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.AppUserRole", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proiect_licenta.Entities.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.AppUserTvShowItem", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proiect_licenta.Entities.TvShows.TvShowItem", "TvShowItem")
                        .WithMany("AppUserTvShowItems")
                        .HasForeignKey("TvShowItemId");

                    b.Navigation("AppUser");

                    b.Navigation("TvShowItem");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Connection", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Group", null)
                        .WithMany("Connections")
                        .HasForeignKey("GroupName");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.AuthorManga", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Manga.DatumManga", null)
                        .WithMany("Authors")
                        .HasForeignKey("DatumMangaId");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.DatumManga", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Manga.ImagesManga", "Images")
                        .WithMany()
                        .HasForeignKey("ImagesId");

                    b.HasOne("Proiect_licenta.Entities.Manga.PublishedManga", "Published")
                        .WithMany()
                        .HasForeignKey("PublishedId");

                    b.Navigation("Images");

                    b.Navigation("Published");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.DemographicManga", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Manga.DatumManga", null)
                        .WithMany("Demographics")
                        .HasForeignKey("DatumMangaId");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.GenreManga", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Manga.DatumManga", null)
                        .WithMany("Genres")
                        .HasForeignKey("DatumMangaId");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.ImagesManga", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Manga.JpgManga", "Jpg")
                        .WithMany()
                        .HasForeignKey("JpgId");

                    b.HasOne("Proiect_licenta.Entities.Manga.WebpManga", "Webp")
                        .WithMany()
                        .HasForeignKey("WebpId");

                    b.Navigation("Jpg");

                    b.Navigation("Webp");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.PropManga", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Manga.FromManga", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("Proiect_licenta.Entities.Manga.ToManga", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.PublishedManga", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Manga.PropManga", "Prop")
                        .WithMany()
                        .HasForeignKey("PropId");

                    b.Navigation("Prop");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.SerializationManga", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Manga.DatumManga", null)
                        .WithMany("Serializations")
                        .HasForeignKey("DatumMangaId");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.ThemeManga", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.Manga.DatumManga", null)
                        .WithMany("Themes")
                        .HasForeignKey("DatumMangaId");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Message", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.AppUser", "Recipient")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Proiect_licenta.Entities.AppUser", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Photo", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.AppUser", "AppUser")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("Proiect_licenta.Entities.Photo", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.UserFriend", b =>
                {
                    b.HasOne("Proiect_licenta.Entities.AppUser", "AddedByUser")
                        .WithMany("AddedUsers")
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Proiect_licenta.Entities.AppUser", "AddedUser")
                        .WithMany("AddedByUsers")
                        .HasForeignKey("AddedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("AddedUser");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Anime.Datum", b =>
                {
                    b.Navigation("Demographics");

                    b.Navigation("Genres");

                    b.Navigation("Licensors");

                    b.Navigation("Producers");

                    b.Navigation("Studios");

                    b.Navigation("Themes");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.AppUser", b =>
                {
                    b.Navigation("AddedByUsers");

                    b.Navigation("AddedUsers");

                    b.Navigation("AppUserMovieItems");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("ProfilePicture");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Group", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Manga.DatumManga", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Demographics");

                    b.Navigation("Genres");

                    b.Navigation("Serializations");

                    b.Navigation("Themes");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.Movies.MovieItem", b =>
                {
                    b.Navigation("AppUserMovieItems");
                });

            modelBuilder.Entity("Proiect_licenta.Entities.TvShows.TvShowItem", b =>
                {
                    b.Navigation("AppUserTvShowItems");
                });
#pragma warning restore 612, 618
        }
    }
}
